//
// Grammar definition (CUP) file of a 
//   small procedural language
//

import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory;

parser code {:

       int errorCount = 0;
       static int MAX_ERRORS = 20; 
              
       // Debugging
       public void dbg(String msg) {
          // Uncomment to turn debugging back on 
       	  // System.err.println(msg); 
       }

       // Driver should give us an ErrorReport object that we can 
       // share with the scanner and other phases.  If it doesn't, we'll 
       // print to StdErr. 
       ErrorReport report = null; 
       public void setErrorReport( ErrorReport _report) {
       	      report = _report; 
       }
       
       public void syntax_error(java_cup.runtime.Symbol cur_token) {
           ComplexSymbolFactory.ComplexSymbol the_token =
	      (ComplexSymbolFactory.ComplexSymbol) cur_token; 
	   report_error("Syntax error in line " +
			the_token.xleft.getLine() +
			", near column " +
			the_token.xleft.getColumn(),  null);
	   ++ errorCount; 
	   if (errorCount > MAX_ERRORS) {
	       System.err.println("More than " + MAX_ERRORS + " errors. " + 
				"Giving up"); 
	       done_parsing(); 
	       System.exit(1); 
	   }
       }

       // Overrides default error reporting
       public void report_error(String msg, Object ignored) {
       	     if (report == null) {
	        System.err.println(msg); 
	     } else {
	        report.err(msg); 
             }
       }

       // Convenience form
       public void report_error(String msg) {
       	      report_error(msg, null); 
       }

:}

// ====   Terminal symbols (interface to JFlex) ========

// Punctuation 

terminal LBRACE, RBRACE, SEMI, COLON, ASSIGN, COMMA ;
terminal DOT, AT, LPAREN, RPAREN, NEG ; 
terminal TIMES, DIV, PLUS, MINUS ;
terminal LEQ, LT, EQ, NOT; 
terminal RIGHTARROW; 

// Keywords
terminal CLASS, INHERITS, IF, THEN, ELSE, FI, WHILE, DO, OD, LET, IN ;
terminal CASE, OF, ESAC; 
terminal NEW, ISVOID;
terminal LOOP, POOL;


// Literals

terminal TRUE, FALSE, INTLIT, STRINGLIT;

// Identifiers

terminal ID;        // Identifier (variable name)
terminal TYPEID;    // Type (class) name

// ====   Non-terminal symbols (defined by CUP grammar below) ====
//        (write the grammar, then add symbols to this list) 

nonterminal program, classes, clazz, optParent, features; 
nonterminal feature,methodBlock,attributeDeclaration;
nonterminal formals, expr, nonEmptyFormals;
nonterminal formal; 
nonterminal optianalAssignment;
nonterminal exp0, literalOrBoolExp;
nonterminal exp1, objInvoke, classInvoke,localInvoke;
nonterminal arguments, nonEmptyAarguments; 
nonterminal exp2, exp3, exp4, exp5, exp6;
nonterminal compOp;
nonterminal exp7, exp8;
nonterminal exprSequnce,letExpr,cases;
nonterminal optionalExprSequece;
nonterminal initializations, initialization;
nonterminal caseBlock; 
nonterminal empty; 


// ====   Grammar ======

// Cool manual:     program ::= class;+
// A program is a sequence of one or more classes, 
//   separated by semicolons

program ::= classes ; 

classes ::= classes clazz SEMI
        |   clazz SEMI
	|   error SEMI 
	;

// Cool manual:   class ::= class TYPE [inherits TYPE] { feature;* }
// 
clazz	  ::=	CLASS TYPEID optParent LBRACE features RBRACE ; 
optParent ::=   INHERITS TYPEID 
	  |	empty ; 
features  ::=  features feature SEMI
	  | empty ; 


// Cool manual: feature ::= ID( [formal[,formal]*] ): TYPE { expr }
//                      |   ID: TYPE [ <-  expr ]
//

feature	 ::=  methodBlock 
			| attributeDeclaration; 

//ID( [formal[,formal]*] ): TYPE { expr }
methodBlock   ::=  ID LPAREN formals RPAREN COLON TYPEID LBRACE expr RBRACE ; 

// [formal[,formal]*]
formals  ::=  nonEmptyFormals
				|	empty ;

//formal[,formal]*				
nonEmptyFormals ::=  formal
 				  | nonEmptyFormals COMMA formal; 

//ID: TYPE [ <-  expr ]
attributeDeclaration ::= ID COLON TYPEID optianalAssignment  ;

//[ <-  expr ]
optianalAssignment ::= ASSIGN expr 
				 | empty ;

// Cool manual: formal ::= ID : TYPE 
formal ::= ID: COLON TYPEID;

// Cool manual gives precedence (left associative except as noted)
// 1: . @ 
// 2: ~ 
// 3: isvoid 
// 4:  * / 
// 5: + -
// 6: <= < = (non-associative)
// 7: not 
// 8: := (right-associative)
// then control operators if, while, let, etc., 
// with "let" gobbling as much to the right as possible
//

//ID | integer | string | true | false | (expr) | new TYPE
exp0    ::= ID  
		  | literalOrBoolExp
		  | LPAREN expr RPAREN 
		  | NEW TYPEID  ; 

//integer | string | true | false 		  
literalOrBoolExp ::=  INTLIT
		   | STRINGLIT
		   | TRUE 
 		   | FALSE ;

// 1: . @    
// Cool Manual:  expr ::= expr[@TYPE].ID(expr[,expr]*)
exp1   ::=  objInvoke
   		  | classInvoke
		  | localInvoke 
		  | exp0 ; 

//Object Invoke :  expr.ID(expr[,expr]*)
objInvoke ::= exp1 DOT ID LPAREN arguments RPAREN ;

//Class Invoke :  expr[@TYPE].ID(expr[,expr]*)
classInvoke ::= exp1 AT TYPEID DOT ID LPAREN arguments RPAREN ;

//Local method Invoke : ID(expr[,expr]*)
localInvoke ::= ID LPAREN arguments RPAREN ;

arguments ::= nonEmptyAarguments 
			| empty ;

nonEmptyAarguments ::= nonEmptyAarguments COMMA expr 
			  | expr ; 

// 2: ~ 			  
// Unary negation ~
exp2 ::= NEG exp2
       | exp1 ; 

// 3: isvoid 
exp3 ::= ISVOID exp3
 	   | exp2 ; 
	 
// 4:  * / 
exp4 ::= exp4 TIMES exp3
	   | exp4 DIV exp3
	   | exp3 ; 


// 5: + -
exp5 ::= exp5 PLUS exp4
	   | exp5 MINUS exp4
	   | exp4 ; 
	   

// 6: <= < = (non-associative)
exp6 ::= exp5 compOp exp5
	   | exp5;

compOp ::= LT 
	   | LEQ 
	   | EQ  ;
	   

// 7: not 
exp7 ::= NOT exp7
	   | exp6 ;

	  
// 8: <- (right-associative)
// Assignment
exp8 ::= exp7 ASSIGN exp8 
	   | exp7 ; 
	 
//Wrap up	 
expr ::= exp8 ; //Could have dropped exp8 and edited exp7. But this is cleaner. 

// then control operators if, while, let, etc., 
expr ::=  IF expr THEN expr ELSE expr FI 
     |    WHILE expr DO expr OD 			//Kept this too
	 |    WHILE expr LOOP expr POOL
     |    exprSequnce
     |    letExpr
     |    CASE expr OF cases ESAC 
     ;

//{ [expr;]+ }
exprSequnce ::= LBRACE expr SEMI optionalExprSequece RBRACE ;

//[expr;]*
optionalExprSequece ::= optionalExprSequece expr SEMI 
						| empty;

//let ID: TYPE [ <- expr ] [, ID: TYPE [ <- expr ]]* in expr
letExpr ::=  LET initializations IN expr;

//ID: TYPE [ <- expr ] [, ID: TYPE [ <- expr ]]*
initializations ::= initializations COMMA initialization
					|   initialization ; 

//ID: TYPE [ <- expr ] 
initialization ::= ID COLON TYPEID optianalAssignment;


// [ID: TYPE => expr;]+
cases ::= cases caseBlock
	    	| caseBlock ; 

//ID: TYPE => expr;			
caseBlock  ::= ID COLON TYPEID RIGHTARROW expr SEMI  ; 

empty ::= ;  