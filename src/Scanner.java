/* The following code was generated by JFlex 1.4.3 on 4/8/15 9:43 PM */

/* JFlex spec for Cool scanner */ 

import java_cup.runtime.Symbol;
import java_cup.runtime.SymbolFactory;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/8/15 9:43 PM from the specification file
 * <tt>D:/Eclipse WorkSpace/Compiler/src/Cool.flex</tt>
 */
class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 6;
  public static final int INCOMMENT = 4;
  public static final int INCLUDEFILE = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\4\25\0\1\1\1\0\1\52\1\10\4\0\1\5"+
    "\1\7\1\6\1\33\1\34\1\3\1\23\1\27\12\51\1\30\1\22"+
    "\1\25\1\24\1\26\1\2\1\32\32\50\1\2\1\53\2\2\1\47"+
    "\1\0\1\40\1\46\1\13\1\16\1\17\1\37\1\46\1\42\1\11"+
    "\2\46\1\14\1\46\1\12\1\44\2\46\1\36\1\41\1\35\1\15"+
    "\1\43\1\45\3\46\1\20\1\0\1\21\1\31\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\7\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\4\7\1\24\1\25"+
    "\1\26\1\27\2\30\1\31\1\32\2\0\1\33\1\0"+
    "\1\34\1\35\6\7\1\36\2\7\1\37\1\40\1\41"+
    "\2\7\1\42\1\7\1\43\1\44\1\7\1\45\1\46"+
    "\1\2\1\0\2\7\1\47\1\50\2\7\1\51\6\7"+
    "\1\0\3\7\1\52\1\53\1\54\1\55\1\56\2\7"+
    "\1\0\2\7\1\57\1\60\1\61\1\0\1\7\1\62"+
    "\1\0\1\7\1\63\1\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[108];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"+
    "\0\260\0\260\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c"+
    "\0\u0268\0\u0294\0\260\0\260\0\260\0\260\0\u02c0\0\u02ec"+
    "\0\260\0\u0318\0\260\0\260\0\260\0\260\0\u0344\0\u0370"+
    "\0\u039c\0\u03c8\0\u03f4\0\u0420\0\260\0\u044c\0\u0478\0\u04a4"+
    "\0\u04d0\0\260\0\u04fc\0\u0528\0\260\0\u0554\0\u0580\0\u023c"+
    "\0\u05ac\0\u05d8\0\u0604\0\u0630\0\u065c\0\u0688\0\u023c\0\u06b4"+
    "\0\u06e0\0\260\0\260\0\260\0\u070c\0\u0738\0\u023c\0\u0764"+
    "\0\u023c\0\u023c\0\u0790\0\260\0\260\0\260\0\u07bc\0\u07e8"+
    "\0\u0814\0\u023c\0\u023c\0\u0840\0\u086c\0\u023c\0\u0898\0\u08c4"+
    "\0\u08f0\0\u091c\0\u0948\0\u0974\0\u09a0\0\u09cc\0\u09f8\0\u0a24"+
    "\0\u023c\0\u023c\0\u023c\0\u023c\0\u023c\0\u0a50\0\u0a7c\0\u0aa8"+
    "\0\u0ad4\0\u0b00\0\u023c\0\u023c\0\u023c\0\u0b2c\0\u0b58\0\u023c"+
    "\0\u0b84\0\u0bb0\0\260\0\u023c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[108];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\5\1\7\1\6\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\5\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\20\1\40"+
    "\4\20\1\41\1\42\1\20\1\5\1\43\1\44\1\45"+
    "\2\5\1\6\1\46\1\7\1\6\1\10\1\11\1\12"+
    "\1\13\7\46\1\23\1\24\7\46\1\33\1\46\1\35"+
    "\1\36\15\46\1\45\1\46\6\47\1\50\45\47\4\51"+
    "\1\0\45\51\1\52\1\53\55\0\1\6\2\0\1\6"+
    "\52\0\1\54\56\0\1\55\56\0\1\56\53\0\1\20"+
    "\1\57\5\20\15\0\2\20\1\60\1\20\1\61\10\20"+
    "\13\0\6\20\1\62\15\0\7\20\1\63\5\20\13\0"+
    "\3\20\1\64\3\20\15\0\3\20\1\65\11\20\13\0"+
    "\6\20\1\66\15\0\15\20\13\0\7\20\15\0\15\20"+
    "\13\0\7\20\15\0\7\20\1\67\5\20\13\0\3\20"+
    "\1\70\3\20\15\0\4\20\1\71\10\20\30\0\1\72"+
    "\51\0\1\73\53\0\1\74\40\0\7\20\15\0\1\20"+
    "\1\75\3\20\1\76\7\20\13\0\1\77\6\20\15\0"+
    "\3\20\1\100\11\20\13\0\5\20\1\101\1\20\15\0"+
    "\2\20\1\102\12\20\13\0\7\20\15\0\5\20\1\103"+
    "\7\20\13\0\7\43\15\0\15\43\53\0\1\44\4\0"+
    "\1\46\6\0\7\46\2\0\7\46\1\0\1\46\2\0"+
    "\15\46\1\0\1\46\6\47\1\0\45\47\7\0\1\104"+
    "\44\0\4\51\1\0\45\51\14\0\1\105\41\0\4\54"+
    "\1\106\47\54\12\0\1\107\52\0\7\20\15\0\5\20"+
    "\1\110\7\20\13\0\7\20\15\0\6\20\1\111\6\20"+
    "\13\0\7\20\15\0\10\20\1\112\4\20\13\0\7\20"+
    "\15\0\1\113\14\20\13\0\7\20\15\0\3\20\1\114"+
    "\11\20\13\0\7\20\15\0\4\20\1\115\10\20\13\0"+
    "\7\20\15\0\1\116\14\20\13\0\7\20\15\0\4\20"+
    "\1\117\10\20\13\0\7\20\15\0\3\20\1\120\11\20"+
    "\13\0\4\20\1\121\2\20\15\0\15\20\13\0\6\20"+
    "\1\122\15\0\15\20\13\0\3\20\1\123\3\20\15\0"+
    "\15\20\13\0\1\124\6\20\15\0\15\20\15\0\1\125"+
    "\51\0\6\20\1\126\15\0\15\20\13\0\7\20\15\0"+
    "\7\20\1\127\5\20\13\0\7\20\15\0\4\20\1\130"+
    "\10\20\13\0\6\20\1\131\15\0\15\20\13\0\6\20"+
    "\1\132\15\0\15\20\13\0\2\20\1\133\4\20\15\0"+
    "\15\20\13\0\6\20\1\134\15\0\15\20\13\0\1\20"+
    "\1\135\5\20\15\0\15\20\13\0\7\20\15\0\4\20"+
    "\1\136\10\20\13\0\3\20\1\137\3\20\15\0\15\20"+
    "\16\0\1\140\50\0\7\20\15\0\1\20\1\141\13\20"+
    "\13\0\1\142\6\20\15\0\15\20\13\0\7\20\15\0"+
    "\4\20\1\143\10\20\13\0\6\20\1\144\15\0\15\20"+
    "\13\0\6\20\1\145\15\0\15\20\17\0\1\146\47\0"+
    "\1\147\6\20\15\0\15\20\13\0\5\20\1\150\1\20"+
    "\15\0\15\20\20\0\1\151\46\0\7\20\15\0\1\152"+
    "\14\20\21\0\1\153\45\0\7\20\15\0\4\20\1\154"+
    "\10\20\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3036];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\3\1\2\11\10\1\4\11\2\1\1\11"+
    "\1\1\4\11\6\1\1\11\4\1\1\11\2\0\1\11"+
    "\1\0\13\1\3\11\7\1\3\11\1\0\15\1\1\0"+
    "\12\1\1\0\5\1\1\0\2\1\1\0\1\1\1\11"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[108];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;
  
  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** the stack of open (nested) input streams to read from */
  private java.util.Stack zzStreams = new java.util.Stack();

  /**
   * inner class used to store info for nested
   * input streams
   */
  private static final class ZzFlexStreamInfo {
    java.io.Reader zzReader;
    int zzEndRead;
    int zzStartRead;
    int zzCurrentPos;
    int zzMarkedPos;
    int yyline;
    int yycolumn;
    char [] zzBuffer;
    boolean zzAtEOF;
    boolean zzEOFDone;

    /** sets all values stored in this class */
    ZzFlexStreamInfo(java.io.Reader zzReader, int zzEndRead, int zzStartRead,
                  int zzCurrentPos, int zzMarkedPos, 
                  char [] zzBuffer, boolean zzAtEOF, int yyline, int yycolumn) {
      this.zzReader      = zzReader;
      this.zzEndRead     = zzEndRead;
      this.zzStartRead   = zzStartRead;
      this.zzCurrentPos  = zzCurrentPos;
      this.zzMarkedPos   = zzMarkedPos;
      this.zzBuffer      = zzBuffer;
      this.zzAtEOF       = zzAtEOF;
      this.zzEOFDone     = zzEOFDone;
      this.yyline         = yyline;
      this.yycolumn       = yycolumn;
    }
  }

  /* user code: */


  // Stack of file names, for 'include' files
  java.util.Stack<String> input_stack = new java.util.Stack<String>(); 
  String cur_file = "";

  // Buffer for building up tokens that take more than one pattern,
  // e.g., quoted strings 
  StringBuffer string = new StringBuffer();

  // The default "Symbol" class in CUP is stupid.  We need the alternative
  // ComplexSymbol class, which is managed by a ComplexSymbolFactory, 
  // because in Java you don't have Problems, you have ProblemFactories
  // We share the ComplexSymbolFactory with other components;
  // CUP examples do this, but I'm not sure why or if it's necessary.
  ComplexSymbolFactory symbolFactory; 

  // Alternate constructor to share the factory
  public Scanner(java.io.Reader in, ComplexSymbolFactory sf){
	this(in);
	symbolFactory = sf;
  }


  // Factor a bunch of tedium from constructing ComplexSymbol objects
  // into helper functions. 
  /**
   * Create a Symbol (token + location + text) for a lexeme 
   * that is not converted to another kind of value, e.g., 
   * keywords, punctuation, etc.
   */
  public ComplexSymbolFactory.ComplexSymbol mkSym(int id) {
    	    return (ComplexSymbolFactory.ComplexSymbol) 
               symbolFactory.newSymbol( 
	    	  sym.terminalNames[id], // per Cup documentation, no idea why
		  id,               // the actual integer used as a token code
		  new Location(yyline+1, yycolumn+1),  	// Left extent of token
		  new Location(yyline+1, yycolumn+yylength()), // Right extent
		  yytext()       	 		  // Text of the token
		  );
   }

  /**
   * Create a Symbol (token + location + value) for a lexeme 
   * that is not converted to another kind of value, e.g., 
   * an integer literal, or a token that requires more than 
   * one pattern to match (so that we can't just grab yytext).
   */
   public ComplexSymbolFactory.ComplexSymbol mkSym(int id, Object value) {
    	    return (ComplexSymbolFactory.ComplexSymbol) 
                symbolFactory.newSymbol( 
	    	  sym.terminalNames[id],  // per Cup documentation, no idea why
		  id,           	  // the actual integer token code
		  new Location(yyline+1, yycolumn+1),  // Left extent of token
		  new Location(yyline+1, yycolumn+yylength()), // Right extent
		  value      	 		 // e.g. Integer for int value
		  );
   }


   int lexical_error_count = 0; 
   int comment_begin_line = 0; /* For running off end of file in comment */ 
   int MAX_LEX_ERRORS = 20;

   String lit = ""; 

  // If the driver gives us an error report class, we use it to print lexical
  // error messages
  ErrorReport report = null; 
  public void setErrorReport( ErrorReport _report) {
       report = _report;
  }

  void err(String msg) {
    if (report == null) {
        System.err.println(msg); 
    } else {
        report.err(msg); 
    }
   }

  void lexical_error(String msg) {
    String full_msg = "Lexical error at " + cur_file + 
    		      " line " + yyline + 
    		       ", column " + yycolumn +
		       ": " + msg; 
    err(full_msg); 
    if (++lexical_error_count > MAX_LEX_ERRORS) {
       err("Too many lexical errors, giving up."); 
       System.exit(1); 
    }
  }
  


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 116) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }
    
    // numRead < 0) 
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Stores the current input stream on a stack, and
   * reads from a new stream. Lexical state, line,
   * char, and column counting remain untouched.
   *
   * The current input stream can be restored with
   * yypopstream (usually in an <<EOF>> action).
   *
   * @param reader the new input stream to read from
   *
   * @see #yypopStream()
   */
  public final void yypushStream(java.io.Reader reader) {
    zzStreams.push(
      new ZzFlexStreamInfo(zzReader, zzEndRead, zzStartRead, zzCurrentPos,
                        zzMarkedPos, zzBuffer, zzAtEOF,
                        yyline, yycolumn)
    );
    zzAtEOF  = false;
    zzBuffer = new char[ZZ_BUFFERSIZE];
    zzReader = reader;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yycolumn = 0;
  }
    

  /**
   * Closes the current input stream and continues to
   * read from the one on top of the stream stack. 
   *
   * @throws java.util.EmptyStackException
   *         if there is no further stream to read from.
   *
   * @throws java.io.IOException
   *         if there was an error in closing the stream.
   *
   * @see #yypushStream(java.io.Reader)
   */
  public final void yypopStream() throws java.io.IOException {
    zzReader.close();
    ZzFlexStreamInfo s = (ZzFlexStreamInfo) zzStreams.pop();
    zzBuffer      = s.zzBuffer;
    zzReader      = s.zzReader;
    zzEndRead     = s.zzEndRead;
    zzStartRead   = s.zzStartRead;
    zzCurrentPos  = s.zzCurrentPos;
    zzMarkedPos   = s.zzMarkedPos ;
    zzAtEOF       = s.zzAtEOF;
    zzEOFDone     = s.zzEOFDone;
    yyline         = s.yyline;
    yycolumn       = s.yycolumn;
  }


  /**
   * Returns true iff there are still streams left 
   * to read from on the stream stack.
   */
  public final boolean yymoreStreams() {
    return !zzStreams.isEmpty();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   *
   * @see #yypushStream(java.io.Reader)
   * @see #yypopStream()
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public ComplexSymbolFactory.ComplexSymbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      // cached fields:
      int zzCurrentPosL;
      int zzMarkedPosL = zzMarkedPos;
      int zzEndReadL = zzEndRead;
      char [] zzBufferL = zzBuffer;
      char [] zzCMapL = ZZ_CMAP;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 24: 
          { /* skip */
          }
        case 53: break;
        case 7: 
          { return mkSym( sym.ID, yytext());
          }
        case 54: break;
        case 11: 
          { return mkSym( sym.DOT );
          }
        case 55: break;
        case 16: 
          { return mkSym( sym.NEG);
          }
        case 56: break;
        case 49: 
          { return mkSym( sym.WHILE );
          }
        case 57: break;
        case 50: 
          { return mkSym( sym.ISVOID );
          }
        case 58: break;
        case 39: 
          { return mkSym( sym.NEW );
          }
        case 59: break;
        case 40: 
          { return mkSym( sym.NOT );
          }
        case 60: break;
        case 47: 
          { return mkSym( sym.CLASS );
          }
        case 61: break;
        case 43: 
          { return mkSym( sym.ELSE );
          }
        case 62: break;
        case 13: 
          { return mkSym( sym.LT );
          }
        case 63: break;
        case 23: 
          { String filename=yytext(); 
   	     yybegin(YYINITIAL); 
	     input_stack.push(cur_file); 
	     cur_file = filename; 
	     yypushStream(new java.io.FileReader(yytext()));
          }
        case 64: break;
        case 38: 
          { lit=lit+"\n";
          }
        case 65: break;
        case 22: 
          { yybegin(STRING); lit="";
          }
        case 66: break;
        case 52: 
          { return mkSym( sym.INHERITS );
          }
        case 67: break;
        case 37: 
          { yybegin(YYINITIAL);
          }
        case 68: break;
        case 29: 
          { return mkSym( sym.IF );
          }
        case 69: break;
        case 48: 
          { return mkSym( sym.FALSE );
          }
        case 70: break;
        case 34: 
          { return mkSym( sym.FI );
          }
        case 71: break;
        case 30: 
          { return mkSym( sym.DO );
          }
        case 72: break;
        case 6: 
          { return mkSym( sym.RPAREN );
          }
        case 73: break;
        case 9: 
          { return mkSym( sym.RBRACE );
          }
        case 74: break;
        case 32: 
          { return mkSym( sym.LEQ);
          }
        case 75: break;
        case 14: 
          { return mkSym( sym.DIV );
          }
        case 76: break;
        case 5: 
          { return mkSym( sym.TIMES);
          }
        case 77: break;
        case 15: 
          { return mkSym( sym.COLON);
          }
        case 78: break;
        case 17: 
          { return mkSym( sym.AT);
          }
        case 79: break;
        case 18: 
          { return mkSym( sym.PLUS);
          }
        case 80: break;
        case 42: 
          { return mkSym( sym.CASE );
          }
        case 81: break;
        case 1: 
          { lexical_error("Illegal character '" +
      	              yytext() +
		      "' ");
          }
        case 82: break;
        case 31: 
          { return mkSym( sym.RIGHTARROW);
          }
        case 83: break;
        case 20: 
          { return mkSym( sym.TYPEID, yytext());
          }
        case 84: break;
        case 28: 
          { return mkSym( sym.IN );
          }
        case 85: break;
        case 26: 
          { yybegin(YYINITIAL);  return mkSym( sym.STRINGLIT, lit );
          }
        case 86: break;
        case 36: 
          { return mkSym( sym.OF );
          }
        case 87: break;
        case 46: 
          { return mkSym( sym.THEN );
          }
        case 88: break;
        case 3: 
          { return mkSym( sym.MINUS);
          }
        case 89: break;
        case 2: 
          { ; /* skip */
          }
        case 90: break;
        case 51: 
          { yybegin(INCLUDEFILE);
          }
        case 91: break;
        case 27: 
          { yybegin(INCOMMENT); comment_begin_line = yyline;
          }
        case 92: break;
        case 21: 
          { return mkSym( sym.INTLIT, yytext() );
          }
        case 93: break;
        case 45: 
          { return mkSym( sym.TRUE );
          }
        case 94: break;
        case 4: 
          { return mkSym( sym.LPAREN );
          }
        case 95: break;
        case 41: 
          { return mkSym( sym.LET );
          }
        case 96: break;
        case 8: 
          { return mkSym( sym.LBRACE );
          }
        case 97: break;
        case 33: 
          { return mkSym( sym.ASSIGN);
          }
        case 98: break;
        case 19: 
          { return mkSym( sym.COMMA);
          }
        case 99: break;
        case 35: 
          { return mkSym( sym.OD );
          }
        case 100: break;
        case 25: 
          { lit=lit+yytext();
          }
        case 101: break;
        case 10: 
          { return mkSym( sym.SEMI );
          }
        case 102: break;
        case 44: 
          { return mkSym( sym.ESAC );
          }
        case 103: break;
        case 12: 
          { return mkSym( sym.EQ );
          }
        case 104: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case INCOMMENT: {
              lexical_error("Comment \"(*...\"  missing ending \"*)\"" +
                          "\nComment began on line " +comment_begin_line ); 
	    yybegin(YYINITIAL);
            }
            case 109: break;
            default:
              {
                if (yymoreStreams()) {
	        yypopStream(); 
		cur_file = input_stack.pop(); 
	     }  else {
                return mkSym( sym.EOF ); 
	     }
              }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
